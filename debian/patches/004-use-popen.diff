Description: Call external commands via Popen
 Use the subprocess.Popen() method instead on relying on the less
 secure os.system() method when calling external commands.
 .
 Notify the user of the outcome of the printing process as well.
Author: Andrea Bolognani <eof@kiyuko.org>
Last-Update: 2012-02-01
Index: rhinote.git/rhinote.py
===================================================================
--- rhinote.git.orig/rhinote.py	2012-02-01 11:39:57.599382422 +0100
+++ rhinote.git/rhinote.py	2012-02-01 12:13:57.228688446 +0100
@@ -25,6 +25,7 @@
 import tkFileDialog, tkMessageBox
 import os
 import tempfile
+import subprocess
 
 # the root window:
 def Rhinote():
@@ -91,9 +92,29 @@
         f = tempfile.NamedTemporaryFile(prefix = 'Rhinoteprintfile-', delete = False)
         f.write(self.get('1.0', 'end'))
         f.close()
-        # 'enscript' formats the text; lpr sends it to the default printer;
-        # enscript's -B option suppresses page headers.
-        os.system('%s -B --word-wrap %s > %s &' % (self.formatcommand, f.name, self.printcommand))
+        # Prepare the format command
+        formatargv = [self.formatcommand]
+        formatargv.extend(self.formatargs)
+        formatargv.append(f.name)
+        # Prepare the print command
+        printargv = [self.printcommand]
+        printargv.extend(self.printargs)
+        # Spawn both commands, piping the output of the format command
+        # to the input of the print command
+        fp = subprocess.Popen(formatargv, stdout=subprocess.PIPE)
+        pp = subprocess.Popen(printargv, stdin=fp.stdout, stdout=subprocess.PIPE)
+        # Required according to http://docs.python.org/library/subprocess.html#replacing-shell-pipeline
+        fp.stdout.close()
+        # Wait for both format and print command to complete
+        fp.wait()
+        pp.wait()
+        # Remove the secure temp file
+        os.unlink(f.name)
+        # Notify the user of the outcome of the printing operation
+        if fp.returncode > 0 or pp.returncode > 0:
+            tkMessageBox.showerror('Print error', 'Printing failed')
+        else:
+            tkMessageBox.showinfo('FYI', 'File Printed')
 
     def help(self, whatever = None):
         tkMessageBox.showinfo('Rhinote Help', message = '''
@@ -159,7 +180,9 @@
             ]
         # Find print and format commands
         self.printcommand = self.which('lpr')
+        self.printargs = []
         self.formatcommand = self.which('enscript')
+        self.formatargs = ['-B', '--word-wrap', '-o', '-']
 
 # make it so:
 if __name__ == '__main__':
