From: Andrea Bolognani <eof@kiyuko.org>
Date: Wed, 1 Feb 2012 12:22:31 +0100
Subject: Call external commands via Popen

Use the subprocess.Popen() method instead on relying on the less
secure os.system() method when calling external commands.

Notify the user of printing errors as well.

Forwarded: Marv Boyes <greyspace@tuxfamily.org>
---
 rhinote.py | 27 ++++++++++++++++++++++++---
 1 file changed, 24 insertions(+), 3 deletions(-)

diff --git a/rhinote.py b/rhinote.py
index 376cb2c..3934815 100644
--- a/rhinote.py
+++ b/rhinote.py
@@ -25,6 +25,7 @@ import tkinter
 import tkinter.filedialog as tkFileDialog
 import tkinter.messagebox as tkMessageBox
 import os
+import subprocess
 
 
 # the root window:
@@ -92,9 +93,27 @@ class TextWidget(tkinter.Text):
         f = open(self.printfilename, 'w')
         f.write(self.get('1.0', 'end'))
         f.close
-        # 'enscript' formats the text; lpr sends it to the default printer;
-        # enscript's -B option suppresses page headers.
-        os.system('%s -B --word-wrap %s > %s &' % (self.formatcommand, self.printfilename, self.printcommand))
+        # Prepare the format command
+        formatargv = [self.formatcommand]
+        formatargv.extend(self.formatargs)
+        formatargv.append(self.printfilename)
+        # Prepare the print command
+        printargv = [self.printcommand]
+        printargv.extend(self.printargs)
+        # Spawn both commands, piping the output of the format command
+        # to the input of the print command
+        fp = subprocess.Popen(formatargv, stdout=subprocess.PIPE)
+        pp = subprocess.Popen(printargv, stdin=fp.stdout, stdout=subprocess.PIPE)
+        # Required according to http://docs.python.org/library/subprocess.html#replacing-shell-pipeline
+        fp.stdout.close()
+        # Wait for both format and print command to complete
+        fp.wait()
+        pp.wait()
+        # Remove the temp file
+        os.unlink(self.printfilename)
+        # Notify the user of the outcome of the printing operation
+        if fp.returncode > 0 or pp.returncode > 0:
+            tkMessageBox.showerror('Print error', 'Printing failed')
 
     def help(self, whatever=None):
         tkMessageBox.showinfo('Rhinote Help', message='''
@@ -161,7 +180,9 @@ http://rhinote.tuxfamily.org
         ]
         # Find print and format commands
         self.printcommand = self.which('lpr')
+        self.printargs = []
         self.formatcommand = self.which('enscript')
+        self.formatargs = ['-B', '--word-wrap', '-o', '-']
 
 
 # make it so:
